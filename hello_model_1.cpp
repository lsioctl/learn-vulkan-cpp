#include <iostream>
#include <stdexcept>
#include <cstdlib>
#include <vector>
#include <cstring>
#include <map>
#include <optional>
#include <set>
#include <cstdint> // Necessary for uint32_t
#include <fstream>
#include <chrono>
#include <memory>

// Let GLFW include by itslef vulkan headers
#define GLFW_INCLUDE_VULKAN
#include "GLFW/glfw3.h"
// The perspective projection matrix generated by GLM will 
// use the OpenGL depth range of -1.0 to 1.0 by default. 
// We need to configure it to use the Vulkan range of 0.0 to 1.0
#define GLM_FORCE_DEPTH_ZERO_TO_ONE
#include "glm/glm.hpp"
#include "glm/gtc/matrix_transform.hpp"
// to easily print glm vec
#include "glm/gtx/string_cast.hpp"
// could be only in one file in the project
#define TINYOBJLOADER_IMPLEMENTATION
#include "tiny_obj_loader.h"

#include "device.hpp"
#include "swapchain3.hpp"
#include "pipeline5.hpp"
#include "vertex3.hpp"
#include "camera.hpp"
#include "buffer2.hpp"
#include "texture3.hpp"
#include "image2.hpp"
#include "commandbuffer.hpp"

#ifdef NDEBUG
    const bool ENABLE_VALIDATION_LAYERS = false;
#else
    const bool ENABLE_VALIDATION_LAYERS = true;
#endif

const uint32_t WIDTH = 800;
const uint32_t HEIGHT = 600;
/**
 *  We don't want the CPU to be too much ahead of the GPU, hence 2 frames in flight
 *  Note that rougher primitives like vkDeviceWaitIdle are also possible
 */
const int MAX_FRAMES_IN_FLIGHT = 2;

const std::vector<const char*> VALIDATION_LAYERS = {
    "VK_LAYER_KHRONOS_validation"
};

// we use the macro to avoid mispelling
// "VK_KHR_swapchain"
const std::vector<const char*> DEVICE_EXTENSIONS = {
    VK_KHR_SWAPCHAIN_EXTENSION_NAME
};

const auto VERT_FILE = "./shaders/spirv/shader5.vert.spirv";
const auto FRAG_FILE = "./shaders/spirv/shader3.frag.spirv";
const auto TEXTURE_PATH = "./models/viking_room.png";
const auto MODEL_PATH = "models/viking_room.obj";

void errorCallback(int error, const char* description)
{
    fprintf(stderr, "Error: %s\n", description);
}

void processInput(GLFWwindow *window, Camera& camera, float delta_time) {
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
    {
        glfwSetWindowShouldClose(window, true);
    }
    if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
    {
        camera.updatePosition(Camera::Movement::Front, delta_time);
    }
    if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
    {
        camera.updatePosition(Camera::Movement::Back, delta_time);
    }
    if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
    {
        camera.updatePosition(Camera::Movement::Left, delta_time);
    }
    if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
    {
        camera.updatePosition(Camera::Movement::Right, delta_time);
    }
}

struct DestroyglfwWin{
    void operator()(GLFWwindow* ptr){
         glfwDestroyWindow(ptr);
    }
};

class HelloTriangleApplication {
public:
    void run() {
        initWindow();
        initVulkan();
        mainLoop();
        cleanup();
    }

private:
    std::unique_ptr<GLFWwindow, DestroyglfwWin> window_;
    VkInstance instance_;
    VkDebugUtilsMessengerEXT debugMessenger_;
    /**
     * This will be destroyed when vkInstance will be destroyed
     * so no need to do anything in Cleanup() about it
     * */
    VkPhysicalDevice physicalDevice_ = VK_NULL_HANDLE;
    /**
     * logical device
     */
    VkDevice device_;
    /**
     * Queues are created with the logical devices
     * store a handle to the graphics queue
     * Device queues are implicitly cleaned up when the device is destroyed, 
     * so we don't need to do anything in cleanup.
     */
    VkQueue graphicsQueue_;
    VkQueue presentationQueue_;
    VkSurfaceKHR surface_;
    VkSwapchainKHR swapChain_;
    /** Images will be destroyed when Swap Chain is destroyed */
    std::vector<VkImage> swapChainImages_;
    VkFormat swapChainImageFormat_;
    VkExtent2D swapChainExtent_;
    std::vector<VkImageView> swapChainImageViews_;
    VkRenderPass renderPass_;
    VkDescriptorSetLayout descriptorSetLayout_;
    VkPipelineLayout pipelineLayout_;
    VkPipeline graphicsPipeline_;
    std::vector<VkFramebuffer> swapChainFramebuffers_;
    VkCommandPool commandPool_;
    std::vector<VkCommandBuffer> commandBuffers_;
    /** Semaphore: blocking wait in GPU not in CPU */
    std::vector<VkSemaphore> imageAvailableSemaphores_;
    /** Semaphore: blocking wait in GPU not in CPU */
    std::vector<VkSemaphore> renderFinishedSemaphores_;
    /** Fence blocking wait on CPU that GPU has finished */
    std::vector<VkFence> inFlightFences_;
    /** keep track of the current frame */
    uint32_t currentFrame_ = 0;
    /**
     *  May be used if drivers does not trigger
     *  VK_ERROR_OUT_OF_DATE_KHR when window is resized
     */
    bool framebufferResized_ = false;
    VkBuffer vertexBuffer_;
    VkDeviceMemory vertexBufferMemory_;
    VkBuffer indexBuffer_;
    VkDeviceMemory indexBufferMemory_;
    std::vector<VkBuffer> uniformBuffers_;
    std::vector<VkDeviceMemory> uniformBuffersMemory_;
    std::vector<void*> uniformBuffersMapped_;
    VkDescriptorPool descriptorPool_;
    std::vector<VkDescriptorSet> descriptorSets_;
    Camera camera_;
    VkImage textureImage_;
    uint32_t mipLevels_;
    VkDeviceMemory textureImageMemory_;
    VkImageView textureImageView_;
    VkSampler textureSampler_;
    VkImage depthImage_;
    VkFormat depthFormat_;
    VkDeviceMemory depthImageMemory_;
    VkImageView depthImageView_;
    std::vector<vertex3::Vertex> vertices_;
    std::vector<uint32_t> indices_;

    void createSurface() {
        // if the surface object is platform agnostic, its creation is not
        // let glfw handle this for us
        if (glfwCreateWindowSurface(instance_, window_.get(), nullptr, &surface_) != VK_SUCCESS) {
            throw std::runtime_error("failed to create window surface!");
        }
    }

    void setupDebugMessenger() {
        device::setupDebugMessenger(instance_, ENABLE_VALIDATION_LAYERS, &debugMessenger_);
    }

    void createSwapChain() {
        swapchain3::createSwapChain(
            window_.get(),
            physicalDevice_,
            surface_,
            device_,
            &swapChain_,
            // TODO: more explicit about mutation in place of this vector ?
            swapChainImages_,
            &swapChainImageFormat_,
            &swapChainExtent_
        );
    }

    /** 
     * glfw needs static function because it can't handle properly the this pointer
     * this pointer is retrieved through window pointer and a, IMO
     * kind of dirty hook with glfwSetWindowUserPointer and glfwGetWindowUserPointer
     * */
    static void framebufferResizeCallback(GLFWwindow* window, int width, int height) {
        auto app = reinterpret_cast<HelloTriangleApplication*>(glfwGetWindowUserPointer(window));
        app->framebufferResized_ = true;
    }

    static void mouseCallback(GLFWwindow* window, double x_pos, double y_pos) {
        auto app = reinterpret_cast<HelloTriangleApplication*>(glfwGetWindowUserPointer(window));
        app->camera_.updateOrientation(x_pos, y_pos);
    }


    void initWindow() {
        glfwSetErrorCallback(errorCallback);
        glfwInit();
        glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
        // glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);
        window_ = std::unique_ptr<GLFWwindow, DestroyglfwWin>(glfwCreateWindow(WIDTH, HEIGHT, "Vulkan", nullptr, nullptr));
        // this allow to store an arbitrary pointer, and we need this, litteraly :D
        // for mouse callback and framebufferResizeCallback
        glfwSetWindowUserPointer(window_.get(), this);
        glfwSetFramebufferSizeCallback(window_.get(), framebufferResizeCallback);
        // std::cout << window_ << std::endl;
    }

    void createInstance() {
        if (ENABLE_VALIDATION_LAYERS && !device::checkValidationLayerSupport(VALIDATION_LAYERS)) {
            throw std::runtime_error("validation layers requested, but not available!");
        }

        // The instance is the connection between your application and the Vulkan library
        VkApplicationInfo appInfo{};

        // a lot of information on vk is passed through structs instead of function parameters
        appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
        appInfo.pApplicationName = "Hello Triangle";
        appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
        appInfo.pEngineName = "No Engine";
        appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0);
        appInfo.apiVersion = VK_API_VERSION_1_0;

        // a lot of information on vk is passed through structs instead of function parameters
        VkInstanceCreateInfo createInfo{};
        createInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
        createInfo.pApplicationInfo = &appInfo;
        
        // create an additional debugger for vkCreateInstance and vkDestroyInstance
        // TODO: a bit unclear to me why this is written by the doc:
        /***
         * The debugCreateInfo variable is placed outside the if statement to ensure that 
         * it is not destroyed before the vkCreateInstance call. By creating an additional 
         * debug messenger this way it will automatically be used during vkCreateInstance 
         * and vkDestroyInstance and cleaned up after that.
         */
        VkDebugUtilsMessengerCreateInfoEXT debugCreateInfo{};
        // Here checkValidationLayerSupport has already passed
        // TODO: clumsy in the control flow
        if (ENABLE_VALIDATION_LAYERS) {
            createInfo.enabledLayerCount = static_cast<uint32_t>(VALIDATION_LAYERS.size());
            createInfo.ppEnabledLayerNames = VALIDATION_LAYERS.data();

            device::populateDebugMessengerCreateInfo(debugCreateInfo);
            createInfo.pNext = (VkDebugUtilsMessengerCreateInfoEXT*) &debugCreateInfo;
        } else {
            createInfo.enabledLayerCount = 0;

            createInfo.pNext = nullptr;
        }

        auto extensions = device::getRequiredExtensions(ENABLE_VALIDATION_LAYERS);
        createInfo.enabledExtensionCount = static_cast<uint32_t>(extensions.size());
        createInfo.ppEnabledExtensionNames = extensions.data();

        // Note: there is a RAII way to do instead of this: find this an migrate
        // to it when the tutorial is finished
        if (vkCreateInstance(&createInfo, nullptr, &instance_) != VK_SUCCESS) {
            throw std::runtime_error("failed to create instance!");
        }
    }

    void pickPhysicalDevice() {
        device::pickPhysicalDevice(
            instance_,
            surface_,
            DEVICE_EXTENSIONS,
            &physicalDevice_
        );
    }

    void createLogicalDevice() {
        device::createLogicalDevice(
            physicalDevice_,
            surface_,
            DEVICE_EXTENSIONS,
            ENABLE_VALIDATION_LAYERS,
            VALIDATION_LAYERS,
            &device_,
            &graphicsQueue_,
            &presentationQueue_
        );
    }

    void loadModel() {
        /**
         * The attrib container holds all of the positions, normals and texture coordinates 
         * in its attrib.vertices, attrib.normals and attrib.texcoords vectors. 
         * The shapes container contains all of the separate objects and their faces. 
         * Each face consists of an array of vertices, and each vertex contains 
         * the indices of the position, normal and texture coordinate attributes.
         * OBJ models can also define a material and texture per face, but we will be ignoring those.
         */
        tinyobj::attrib_t attrib;
        std::vector<tinyobj::shape_t> shapes;
        std::vector<tinyobj::material_t> materials;
        std::string warn, err;

        if (!tinyobj::LoadObj(&attrib, &shapes, &materials, &warn, &err, MODEL_PATH)) {
            throw std::runtime_error(warn + err);
        }

        // We're going to combine all of the faces in the file into a single model, so just iterate over all of the shapes:
        for (const auto& shape : shapes) {
            // The triangulation feature has already made sure that there are three vertices per face,
            // so we can now directly iterate over the vertices and dump them straight into our vertices vector:
            for (const auto& index : shape.mesh.indices) {
                vertex3::Vertex vertex{};

                // attrib.vertices array is an array of float values instead of something like glm::vec3
                vertex.pos = {
                    attrib.vertices[3 * index.vertex_index + 0], // x
                    attrib.vertices[3 * index.vertex_index + 1], // y
                    attrib.vertices[3 * index.vertex_index + 2] // z
                };

                // Similarly, there are two texture coordinate components per entry.
                vertex.texCoord = {
                    attrib.texcoords[2 * index.texcoord_index + 0], // u
                    // for OBJ format 0 means the bottom of the image
                    // but we've uploaded the image to Vulkan in a top-bottom orientation
                    // so we flip the vertical axis
                    1.0f - attrib.texcoords[2 * index.texcoord_index + 1] // v
                };

                vertex.color = {1.0f, 1.0f, 1.0f};

                vertices_.push_back(vertex);
                // For simplicity, we will assume that every vertex is unique for now, hence the simple auto-increment indices.
                indices_.push_back(indices_.size());
            }
        }
    }

    void createImageViews() {
        swapchain3::createImageViews(
            device_,
            swapChainImages_,
            swapChainImageFormat_,
            swapChainImageViews_,
            1
        );
    }

    void createRenderPass() {
        pipeline5::createRenderPass(
            device_,
            swapChainImageFormat_,
            depthFormat_,
            renderPass_
        );
    }

    void createDescriptorSetLayout() {
        buffer2::createDescriptorSetLayout(
            device_,
            descriptorSetLayout_
        );
    }

    void createGraphicsPipeline() {
        pipeline5::createGraphicsPipeline(
            VERT_FILE,
            FRAG_FILE,
            device_,
            swapChainExtent_,
            renderPass_,
            descriptorSetLayout_,
            pipelineLayout_,
            graphicsPipeline_
        );
    }

    void createFramebuffers() {
        swapchain3::createFramebuffers(
            device_,
            swapChainImageViews_,
            swapChainExtent_,
            depthImageView_,
            renderPass_,
            swapChainFramebuffers_
        );
    }

    void cleanupSwapChain() {
        // Unlike images, imageViews have been created manually
        // so we need to destroy them
        for (auto imageView : swapChainImageViews_) {
            vkDestroyImageView(device_, imageView, nullptr);
        }

        for (auto framebuffer : swapChainFramebuffers_) {
            vkDestroyFramebuffer(device_, framebuffer, nullptr);
        }

        vkDestroyImageView(device_, depthImageView_, nullptr);
        vkDestroyImage(device_, depthImage_, nullptr);
        vkFreeMemory(device_, depthImageMemory_, nullptr);

        // Validation Layer error if we do this before destroying the surface
        vkDestroySwapchainKHR(device_, swapChain_, nullptr);
    }

    /**
     * The disadvantage of this approach is that we need to stop all rendering before creating the new swap chain.
     * It is possible to create a new swap chain while drawing commands on an image from the old swap chain
     * are still in-flight. You need to pass the previous swap chain to the oldSwapChain field in the 
     * VkSwapchainCreateInfoKHR struct and destroy the old swap chain as soon as you've finished using it.
     * 
     * Also, note that we don't recreate the renderpass here for simplicity. In theory it can be possible
     * for the swap chain image format to change during an applications' lifetime, e.g. when moving a window
     * from an standard range to an high dynamic range monitor. This may require the application to recreate
     * the renderpass to make sure the change between dynamic ranges is properly reflected
     * 
     * Also, note that in chooseSwapExtent we already query the new window resolution to make sure that the
     * swap chain images have the (new) right size, so there's no need to modify chooseSwapExtent 
     * (remember that we already had to use glfwGetFramebufferSize get the resolution of the surface in 
     * pixels when creating the swap chain).
     */
    void recreateSwapChain() {
        // custom handling of minimization:
        // we wait until it is over
        int width = 0, height = 0;
        glfwGetFramebufferSize(window_.get(), &width, &height);

        while (width == 0 || height == 0) {
            glfwGetFramebufferSize(window_.get(), &width, &height);
            glfwWaitEvents();
        }

        // don't touch resources while they may be in use
        vkDeviceWaitIdle(device_);

        cleanupSwapChain();

        createSwapChain();
        createImageViews();
        createDepthResources();
        createFramebuffers();
    }

    void createCommandPool() {
        device::QueueFamilyIndices queueFamilyIndices = device::findQueueFamilies(physicalDevice_, surface_);

        VkCommandPoolCreateInfo poolInfo{};
        poolInfo.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
        // We will be recording a command buffer every frame
        // so we want to be able to reset and rerecord over it
        poolInfo.flags = VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;
        // Command buffers are executed by submitting them on one of the device queues
        // record command for drawing so we choose the graphicsFamily queue
        poolInfo.queueFamilyIndex = queueFamilyIndices.graphicsFamily.value();

        if (vkCreateCommandPool(device_, &poolInfo, nullptr, &commandPool_) != VK_SUCCESS) {
            throw std::runtime_error("failed to create command pool!");
        }
    }

    void createVertexBuffer() {
        buffer2::createBuffer(
            buffer2::Type::Vertex,
            physicalDevice_,
            device_,
            commandPool_,
            graphicsQueue_,
            vertices_,
            vertexBuffer_,
            vertexBufferMemory_
        );
    }

    void createIndexBuffer() {
        buffer2::createBuffer(
            buffer2::Type::Index,
            physicalDevice_,
            device_,
            commandPool_,
            graphicsQueue_,
            indices_,
            indexBuffer_,
            indexBufferMemory_
        );
    }

    void createUniformBuffers() {
       buffer2::createUniformBuffers(
        physicalDevice_,
        device_,
        MAX_FRAMES_IN_FLIGHT,
        uniformBuffers_,
        uniformBuffersMemory_,
        uniformBuffersMapped_
       );
    }

    void createCommandBuffers() {
        commandBuffers_.resize(MAX_FRAMES_IN_FLIGHT);

        VkCommandBufferAllocateInfo allocInfo{};
        allocInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
        allocInfo.commandPool = commandPool_;
        // VK_COMMAND_BUFFER_LEVEL_PRIMARY: Can be submitted to a queue 
        // for execution, but cannot be called from other command buffers.
        // VK_COMMAND_BUFFER_LEVEL_SECONDARY: Cannot be submitted directly
        // but can be called from primary command buffers.
        allocInfo.level = VK_COMMAND_BUFFER_LEVEL_PRIMARY;
        allocInfo.commandBufferCount = static_cast<uint32_t>(commandBuffers_.size());

        if (vkAllocateCommandBuffers(device_, &allocInfo, commandBuffers_.data()) != VK_SUCCESS) {
            throw std::runtime_error("failed to allocate command buffers!");
        }
    }

    /** writes the commands we want to execute into a command buffer. */
    void recordCommandBuffer(VkCommandBuffer commandBuffer, uint32_t imageIndex) {
        VkCommandBufferBeginInfo beginInfo{};
        beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
        // none of the flags applicable for us right now
        beginInfo.flags = 0; // Optional
        // only relevant for secondary command buffer
        beginInfo.pInheritanceInfo = nullptr; // Optional

        // If the command buffer was already recorded once, then a call to vkBeginCommandBuffer 
        // will implicitly reset it. It's not possible to append commands to a buffer at a later time.
        if (vkBeginCommandBuffer(commandBuffer, &beginInfo) != VK_SUCCESS) {
            throw std::runtime_error("failed to begin recording command buffer!");
        }

        VkRenderPassBeginInfo renderPassInfo{};
        renderPassInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
        renderPassInfo.renderPass = renderPass_;
        // We created a framebuffer for each swap chain image where it 
        // is specified as a color attachment. 
        // Thus we need to bind the framebuffer for the swapchain image we want to draw to.
        // pick the right framebuffer for the current swapchain image
        renderPassInfo.framebuffer = swapChainFramebuffers_[imageIndex];
        // define the size of the render area
        renderPassInfo.renderArea.offset = {0, 0};
        renderPassInfo.renderArea.extent = swapChainExtent_;
        
        std::array<VkClearValue, 2> clearValues{};
        // Note that the order of clearValues should be identical to the order of your attachments.
        // TODO: still coupling here as I moved the code to pipeline
        // for VK_ATTACHMENT_LOAD_OP_CLEAR, which we used as load operation for the color attachment
        // black with 100% opacity
        clearValues[0].color = {{0.0f, 0.0f, 0.0f, 1.0f}};
        // The range of depths in the depth buffer is 0.0 to 1.0 in Vulkan, where 1.0 lies at the 
        // far view plane and 0.0 at the near view plane. The initial value at each point in the 
        // depth buffer should be the furthest possible depth, which is 1.0.
        clearValues[1].depthStencil = {1.0f, 0};

        renderPassInfo.clearValueCount = static_cast<uint32_t>(clearValues.size());
        renderPassInfo.pClearValues = clearValues.data();

        // no secondary command buffer so no VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS
        vkCmdBeginRenderPass(commandBuffer, &renderPassInfo, VK_SUBPASS_CONTENTS_INLINE);

        vkCmdBindPipeline(commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, graphicsPipeline_);

        VkBuffer vertexBuffers[] = {vertexBuffer_};
        VkDeviceSize offsets[] = {0};
        vkCmdBindVertexBuffers(commandBuffer, 0, 1, vertexBuffers, offsets);

        // we can have only one index buffer
        // we used a 32 bit for storage for the indices
        // so 32 bit storage for the index buffer
        vkCmdBindIndexBuffer(commandBuffer, indexBuffer_, 0, VK_INDEX_TYPE_UINT32);

        // as we defined viewport and scissor state to be dynamic
        // we need to set them in the command buffer before the draw command
        VkViewport viewport{};
        viewport.x = 0.0f;
        viewport.y = 0.0f;
        viewport.width = static_cast<float>(swapChainExtent_.width);
        viewport.height = static_cast<float>(swapChainExtent_.height);
        viewport.minDepth = 0.0f;
        viewport.maxDepth = 1.0f;
        vkCmdSetViewport(commandBuffer, 0, 1, &viewport);

        VkRect2D scissor{};
        scissor.offset = {0, 0};
        scissor.extent = swapChainExtent_;
        vkCmdSetScissor(commandBuffer, 0, 1, &scissor);

        vkCmdBindDescriptorSets(
            commandBuffer,
            VK_PIPELINE_BIND_POINT_GRAPHICS,
            pipelineLayout_,
            0,
            1,
            &descriptorSets_[currentFrame_],
            0,
            nullptr
        );

        vkCmdDrawIndexed(
            commandBuffer,
            // now index count instead of vertex count as we draw indexed
            static_cast<uint32_t>(indices_.size()),
            // instanceCount: Used for instanced rendering, use 1 if you're not doing that.
            1,
            // first index
            0,
            // offset to add to the indices in the index buffer
            0,
            // firstInstance, we don't use instance.
            0 
        );

        vkCmdEndRenderPass(commandBuffer);

        // we've finish recording the command buffer
        if (vkEndCommandBuffer(commandBuffer) != VK_SUCCESS) {
            throw std::runtime_error("failed to record command buffer!");
        }
    }

    /**
     * We'll need one semaphore to signal that an image has been acquired from the swapchain
     * and is ready for rendering, another one to signal that rendering has finished 
     * and presentation can happen, and a fence to make sure only one frame is rendering at a time.
     * (1 record on the command buffer for every frame, and we don't want overwriting it while the
     * GPU is using it)
     */
    void createSyncObjects() {
        imageAvailableSemaphores_.resize(MAX_FRAMES_IN_FLIGHT);
        renderFinishedSemaphores_.resize(MAX_FRAMES_IN_FLIGHT);
        inFlightFences_.resize(MAX_FRAMES_IN_FLIGHT);

        VkSemaphoreCreateInfo semaphoreInfo{};
        semaphoreInfo.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;

        VkFenceCreateInfo fenceInfo{};
        fenceInfo.sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
        // chicken and egg solvgin by the API:
        // the first call to vkWaitForFences() returns immediately
        // since the fence is already signaled.
        // without it it would block forever
        fenceInfo.flags = VK_FENCE_CREATE_SIGNALED_BIT;

        for (size_t i = 0; i < MAX_FRAMES_IN_FLIGHT; i++) {
            if (vkCreateSemaphore(device_, &semaphoreInfo, nullptr, &imageAvailableSemaphores_[i]) != VK_SUCCESS ||
            vkCreateSemaphore(device_, &semaphoreInfo, nullptr, &renderFinishedSemaphores_[i]) != VK_SUCCESS ||
            vkCreateFence(device_, &fenceInfo, nullptr, &inFlightFences_[i]) != VK_SUCCESS) {
                throw std::runtime_error("failed to create semaphores and fences!");
            }
        }
    }

    void updateUniformBuffer(uint32_t currentImage) {
        buffer2::UniformBufferObject ubo{};

        // Model matrix
        // Used to transform local (object coordinates) to world coordinates
        // always start with identity
        glm::mat4 cube_model_matrix{glm::mat4(1.0f)};
        // be wary we have an inversion on y axis (see later on the projection matrix)
        auto position = glm::vec3(0.0f,  0.5f, -3.0f);
        ubo.model = glm::translate(cube_model_matrix, position);
        ubo.model = glm::rotate(ubo.model, glm::radians(90.0f), glm::vec3(0.0f, 0.0f, 1.0f));
        ubo.model = glm::rotate(ubo.model, glm::radians(90.0f), glm::vec3(0.0f, -1.0f, 0.0f));

        ubo.view = camera_.getUpdatedViewMatrix();

        ubo.proj = glm::perspective(
            // 45 degrees vertical fov
            glm::radians(45.0f),
            // aspect ratio
            swapChainExtent_.width / static_cast<float>(swapChainExtent_.height),
            // near plane
            0.1f,
            // far plane
            100.0f
        );

        // trick because glm is for opengl, where y axis is inverted
        // here flip the sign of the scaling factor on th y axis
        ubo.proj[1][1] *= -1;

        // all transformations defined, we can copy
        // no staging buffer, and memory already mapped
        // it is not the most optimal way of doing (see push constants)
        memcpy(uniformBuffersMapped_[currentImage], &ubo, sizeof(ubo));
    }

    void drawFrame() {
        vkWaitForFences(device_, 1, &inFlightFences_[currentFrame_], VK_TRUE, UINT64_MAX);
        

        uint32_t imageIndex;
        // extension so vk...KHR naming
        VkResult result = vkAcquireNextImageKHR(
            device_,
            swapChain_,
            // No timeout 
            UINT64_MAX,
            imageAvailableSemaphores_[currentFrame_],
            VK_NULL_HANDLE,
            // vkImage in our swapchain array
            &imageIndex
        );

        // VK_ERROR_OUT_OF_DATE_KHR: swapchain incompatible with the surface.
        // usally happens when window is resized
        // VK_SUBOPTIMAL_KHR: swapchain usable but surface properties are not matched exactly
        if (result == VK_ERROR_OUT_OF_DATE_KHR) {
            recreateSwapChain();
            // try again in the next drawFrame call
            return;
        // 
        } else if (result != VK_SUCCESS && result != VK_SUBOPTIMAL_KHR) {
            throw std::runtime_error("failed to acquire swap chain image!");
        }

        // Only reset the fence if we are submitting work
        // has we used early return pattern in the lines before
        // vkQueue needs VK_NULL_HANDLE or unsignaled fence
        vkResetFences(device_, 1, &inFlightFences_[currentFrame_]);

        // record the command buffer
        // make sure the command buffer can be recorded
        vkResetCommandBuffer(commandBuffers_[currentFrame_], 0);
        recordCommandBuffer(commandBuffers_[currentFrame_], imageIndex);

        updateUniformBuffer(currentFrame_);

        // submitting the command buffer
        VkSubmitInfo submitInfo{};
        submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
        VkSemaphore waitSemaphores[] = {imageAvailableSemaphores_[currentFrame_]};
        VkPipelineStageFlags waitStages[] = {VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT};
        submitInfo.waitSemaphoreCount = 1;
        submitInfo.pWaitSemaphores = waitSemaphores;
        submitInfo.pWaitDstStageMask = waitStages;
        submitInfo.commandBufferCount = 1;
        submitInfo.pCommandBuffers = &commandBuffers_[currentFrame_];
        VkSemaphore signalSemaphores[] = {renderFinishedSemaphores_[currentFrame_]};
        submitInfo.signalSemaphoreCount = 1;
        submitInfo.pSignalSemaphores = signalSemaphores;

        if (vkQueueSubmit(graphicsQueue_, 1, &submitInfo, inFlightFences_[currentFrame_]) != VK_SUCCESS) {
            throw std::runtime_error("failed to submit draw command buffer!");
        }

        // Presentation
        // The last step of drawing a frame is submitting the result back 
        // to the swap chain to have it eventually show up on the screen
        VkPresentInfoKHR presentInfo{};
        presentInfo.sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;

        presentInfo.waitSemaphoreCount = 1;
        presentInfo.pWaitSemaphores = signalSemaphores;
        VkSwapchainKHR swapChains[] = {swapChain_};
        presentInfo.swapchainCount = 1;
        presentInfo.pSwapchains = swapChains;
        presentInfo.pImageIndices = &imageIndex;
        presentInfo.pResults = nullptr; // Optional

        // submit a request to present an image on the swapchain
        result = vkQueuePresentKHR(presentationQueue_, &presentInfo);


        /**
         * It is important to do this after vkQueuePresentKHR to ensure that the semaphores are in a consistent 
         * state, otherwise a signaled semaphore may never be properly waited upon
         */
        if (result == VK_ERROR_OUT_OF_DATE_KHR || result == VK_SUBOPTIMAL_KHR || framebufferResized_) {
            framebufferResized_ = false;
            recreateSwapChain();
        } else if (result != VK_SUCCESS) {
            throw std::runtime_error("failed to present swap chain image!");
        }

        currentFrame_ = (currentFrame_ + 1) % MAX_FRAMES_IN_FLIGHT;
    }

    void createDescriptorPool() {
        buffer2::createDescriptorPool(
            device_,
            MAX_FRAMES_IN_FLIGHT,
            descriptorPool_
        );
    }

    void createDescriptorSets() {
        buffer2::createDescriptorSets(
            device_,
            MAX_FRAMES_IN_FLIGHT,
            uniformBuffers_,
            descriptorPool_,
            descriptorSetLayout_,
            textureImageView_,
            textureSampler_,
            descriptorSets_
        );
    }

    void createTextureImage() {
        mipLevels_ = texture3::createTextureImage(
            physicalDevice_,
            device_,
            commandPool_,
            graphicsQueue_,
            TEXTURE_PATH,
            textureImage_,
            textureImageMemory_
        );
    }

    void createTextureImageView() {
        texture3::createTextureImageView(
            device_,
            textureImage_,
            textureImageView_,
            mipLevels_
        );
    }

    void createTextureSampler() {
        texture3::createTextureSampler(
            physicalDevice_,
            device_,
            textureSampler_
        );
    }

    void createDepthResources() {
        depthFormat_ = device::findSupportedDepthImageFormat(
            physicalDevice_,
            {VK_FORMAT_D32_SFLOAT, VK_FORMAT_D32_SFLOAT_S8_UINT, VK_FORMAT_D24_UNORM_S8_UINT},
            VK_IMAGE_TILING_OPTIMAL,
            // we want candidates with stencil
            VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT
        );

        texture3::bindImageMemory(
            physicalDevice_,
            device_,
            swapChainExtent_.width,
            swapChainExtent_.height,
            1,
            depthFormat_,
            VK_IMAGE_TILING_OPTIMAL,
            VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,
            VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
            depthImage_,
            depthImageMemory_
        );

        depthImageView_ = image2::createImageView(device_, depthImage_, depthFormat_, VK_IMAGE_ASPECT_DEPTH_BIT, 1);

        // We don't need to explicitly transition the layout of the image to a depth attachment because
        // we'll take care of this in the render pass.
    }

    
    void initVulkan() {
        device::printExtensions();
        createInstance();
        setupDebugMessenger();
        // TODO: something is wrong here and on functions call nested:
        // createSurface must be called before pickPhysicalDevice and LogicalDevice
        // or add a docstring ? Really the kind of hidden state I dislike with OOP
        createSurface();
        pickPhysicalDevice();
        createLogicalDevice();
        loadModel();
        createSwapChain();
        createImageViews();
        createDepthResources();
        createRenderPass();
        createDescriptorSetLayout();
        createGraphicsPipeline();
        createFramebuffers();
        createCommandPool();
        createVertexBuffer();
        createIndexBuffer();
        createUniformBuffers();
        createDescriptorPool();
        createCommandBuffers();
        createSyncObjects();
        createTextureImage();
        createTextureImageView();
        createTextureSampler();
        createDescriptorSets();
    }

    void mainLoop() {
        // for delta_time
        auto last_frame_time = 0.0f;
        
        // cursor enabled while I find a way to escape capturing
        // without escape button
        // glfwSetInputMode(window_, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
        glfwSetCursorPosCallback(window_.get(), mouseCallback);

        while (!glfwWindowShouldClose(window_.get())) {
            glfwPollEvents();
            
            // delta_time
            auto current_frame_time = glfwGetTime();
            auto delta_time = current_frame_time - last_frame_time;
            last_frame_time = current_frame_time;
    
            processInput(window_.get(), camera_, delta_time);
            // std::cout << delta_time << std::endl;
            // std::cout << glm::to_string(camera_.getPosition()) << std::endl;
            // std::cout << glm::to_string(camera_.getFront()) << std::endl;
            // std::cout << camera_.getPitch() << std::endl;


            drawFrame();
        }

        vkDeviceWaitIdle(device_);
    }


    void cleanup() {
        cleanupSwapChain();

        vkDestroySampler(device_, textureSampler_, nullptr);

        vkDestroyImageView(device_, textureImageView_, nullptr);

        vkDestroyImage(device_, textureImage_, nullptr);
        vkFreeMemory(device_, textureImageMemory_, nullptr);

        vkDestroyBuffer(device_, vertexBuffer_, nullptr);
        vkFreeMemory(device_, vertexBufferMemory_, nullptr);

        vkDestroyBuffer(device_, indexBuffer_, nullptr);
        vkFreeMemory(device_, indexBufferMemory_, nullptr);

        // glfw doesn't provide method for this, so us vk call instead
        vkDestroySurfaceKHR(instance_, surface_, nullptr);

        vkDestroyRenderPass(device_, renderPass_, nullptr);

        vkDestroyPipeline(device_, graphicsPipeline_, nullptr);

        for (size_t i = 0; i < MAX_FRAMES_IN_FLIGHT; i++) {
            vkDestroyBuffer(device_, uniformBuffers_[i], nullptr);
            vkFreeMemory(device_, uniformBuffersMemory_[i], nullptr);
        }

        // this will destroy the pool and its descriptor sets
        vkDestroyDescriptorPool(device_, descriptorPool_, nullptr);

        vkDestroyDescriptorSetLayout(device_, descriptorSetLayout_, nullptr);

        vkDestroyPipelineLayout(device_, pipelineLayout_, nullptr);

        vkDestroyCommandPool(device_, commandPool_, nullptr);

        for (size_t i = 0; i < MAX_FRAMES_IN_FLIGHT; i++) {
            vkDestroySemaphore(device_, renderFinishedSemaphores_[i], nullptr);
            vkDestroySemaphore(device_, imageAvailableSemaphores_[i], nullptr);
            vkDestroyFence(device_, inFlightFences_[i], nullptr);
        }

        // This is caught by validation layer message if forgotten
        vkDestroyDevice(device_, nullptr);

        // TODO: why moving this on top of function scope
        // or here doesn't change ?
        // mayberelated to validation layer for create/destroyInstance ?
        if (ENABLE_VALIDATION_LAYERS) {
            std::cout << "Debug Messenger " << debugMessenger_ << std::endl;
            // Removing this triggers validation layer error on vkDestroy
            // ... The Vulkan spec states: All child objects created using instance must 
            // have been destroyed prior to destroying instance ...
            device::destroyDebugUtilsMessengerEXT(instance_, debugMessenger_, nullptr);
        }

        // As we do not use RAII for now, destroy is needed
        vkDestroyInstance(instance_, nullptr);

        glfwTerminate();
    }
};

int main() {
    HelloTriangleApplication app;

    try {
        app.run();
    } catch (const std::exception& e) {
        std::cerr << e.what() << std::endl;
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}
